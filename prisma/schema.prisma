generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model album {
  id          Int      @id @default(autoincrement())
  title       String
  artist      String
  image_url   String?
  year        String?
  track_count String?
  duration    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  song        song[]
  cover_blob  Bytes?
  description String?
  genre       String?
}

model blogpost {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  user      user     @relation(fields: [userId], references: [id], map: "BlogPost_userId_fkey")

  @@index([userId], map: "BlogPost_userId_fkey")
}

model playlist {
  id           Int            @id @default(autoincrement())
  name         String
  userId       Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  user         user           @relation(fields: [userId], references: [id], map: "Playlist_userId_fkey")
  playlistsong playlistsong[]
  image_url    String?
  cover_blob   Bytes?

  @@index([userId], map: "Playlist_userId_fkey")
}

model playlistsong {
  id         Int      @id @default(autoincrement())
  playlistId Int
  songId     Int
  playlist   playlist @relation(fields: [playlistId], references: [id], map: "PlaylistSong_playlistId_fkey")
  song       song     @relation(fields: [songId], references: [id], map: "PlaylistSong_songId_fkey")

  @@index([playlistId], map: "PlaylistSong_playlistId_fkey")
  @@index([songId], map: "PlaylistSong_songId_fkey")
}

model refreshtoken {
  id        Int      @id @default(autoincrement())
  token     String   @unique(map: "RefreshToken_token_key")
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)
  user      user     @relation(fields: [userId], references: [id], map: "RefreshToken_userId_fkey")

  @@index([userId], map: "RefreshToken_userId_fkey")
}

model song {
  id           Int            @id @default(autoincrement())
  title        String
  artist       String
  url          String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  albumId      Int
  duration     String
  genre        String         @default("Rock")
  playlistsong playlistsong[]
  album        album          @relation(fields: [albumId], references: [id], map: "Song_albumId_fkey")
  likedtrack   likedtrack[]

  @@index([albumId], map: "Song_albumId_fkey")
}

model tenant {
  id         Int          @id @default(autoincrement())
  name       String
  user       user[]
  usertenant usertenant[]
}

model user {
  id                     Int            @id @default(autoincrement())
  email                  String?        @unique(map: "User_email_key")
  password               String
  createdAt              DateTime       @default(now())
  updatedAt              DateTime
  emailVerificationToken String?
  emailVerified          Boolean        @default(false)
  resetPasswordExpires   DateTime?
  resetPasswordToken     String?
  currentTenantId        Int?
  avatar                 String?
  bio                    String?        @db.Text
  name                   String?
  preferences            Json?
  blogpost               blogpost[]
  playlist               playlist[]
  refreshtoken           refreshtoken[]
  tenant                 tenant?        @relation(fields: [currentTenantId], references: [id], map: "User_currentTenantId_fkey")
  usertenant             usertenant[]
  likedtrack             likedtrack[]

  @@index([currentTenantId], map: "User_currentTenantId_fkey")
}

model usertenant {
  id       Int    @id @default(autoincrement())
  userId   Int
  tenantId Int
  role     String @default("member")
  tenant   tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade, map: "UserTenant_tenantId_fkey")
  user     user   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserTenant_userId_fkey")

  @@index([tenantId], map: "UserTenant_tenantId_fkey")
  @@index([userId], map: "UserTenant_userId_fkey")
}

model likedtrack {
  id        Int      @id @default(autoincrement())
  userId    Int
  songId    Int
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], map: "LikedTrack_userId_fkey")
  song      song     @relation(fields: [songId], references: [id], map: "LikedTrack_songId_fkey")

  @@unique([userId, songId], map: "LikedTrack_userId_songId_key")
  @@index([userId], map: "LikedTrack_userId_fkey")
  @@index([songId], map: "LikedTrack_songId_fkey")
}
